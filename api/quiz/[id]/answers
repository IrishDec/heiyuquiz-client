// heiyuquiz-client/api/quiz/[id]/answers.js
const { getStore, cleanup } = require('../../../_lib/store');

module.exports.config = { runtime: 'nodejs' };

module.exports = (req, res) => {
  try {
    const { id } = req.query || {};
    const s = getStore();
    cleanup();

    const quiz = s.quizzes.get(id);
    if (!quiz) return res.status(404).json({ ok:false, error:'Quiz not found' });

    const qs = Array.isArray(quiz.questions) ? quiz.questions : [];
    const optionsFor = (q) =>
      Array.isArray(q.options) ? q.options :
      (Array.isArray(q.choices) ? q.choices : []);

    // Always return sanitized questions
    const questions = qs.map(q => ({
      q: q.q || q.question || '',
      options: optionsFor(q)
    }));

    // Prefer top-level quiz.answers (array of indexes); otherwise derive per question
    let correct;
    if (Array.isArray(quiz.answers)) {
      correct = quiz.answers.map(x => (typeof x === 'number' ? x : null));
    } else {
      const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      const norm = s => String(s).trim().toLowerCase().replace(/\s+/g,' ');
      correct = qs.map(q => {
        if (typeof q.correctIndex === 'number') return q.correctIndex;
        if (typeof q.answerIndex  === 'number') return q.answerIndex;
        if (typeof q.correct      === 'number') return q.correct;

        const opts = optionsFor(q);

        // A/B/C/D style
        if (q.answerLetter) {
          const idx = letters.indexOf(String(q.answerLetter).toUpperCase());
          if (idx >= 0 && idx < opts.length) return idx;
        }

        // Text style
        const answerText = q.answer ?? q.correctAnswer ?? q.answerText ?? q.correct_option ?? q.correctText ?? null;
        if (answerText != null) {
          const target = norm(answerText);
          for (let i = 0; i < opts.length; i++) {
            if (norm(opts[i]) === target) return i;
          }
        }

        // fallback (unknown)
        return null;
      });
    }

    res.status(200).json({ ok:true, id, questions, correct });
  } catch (e) {
    console.error('answers error', e);
    res.status(500).json({ ok:false, error:'Server error (answers)' });
  }
};

